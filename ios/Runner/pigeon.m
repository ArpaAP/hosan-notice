// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface BKMinewBeaconData ()
+ (BKMinewBeaconData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation BKMinewBeaconData
+ (BKMinewBeaconData *)fromMap:(NSDictionary *)dict {
  BKMinewBeaconData *result = [[BKMinewBeaconData alloc] init];
  result.uuid = dict[@"uuid"];
  if ((NSNull *)result.uuid == [NSNull null]) {
    result.uuid = nil;
  }
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.major = dict[@"major"];
  if ((NSNull *)result.major == [NSNull null]) {
    result.major = nil;
  }
  result.minor = dict[@"minor"];
  if ((NSNull *)result.minor == [NSNull null]) {
    result.minor = nil;
  }
  result.mac = dict[@"mac"];
  if ((NSNull *)result.mac == [NSNull null]) {
    result.mac = nil;
  }
  result.rssi = dict[@"rssi"];
  if ((NSNull *)result.rssi == [NSNull null]) {
    result.rssi = nil;
  }
  result.batteryLevel = dict[@"batteryLevel"];
  if ((NSNull *)result.batteryLevel == [NSNull null]) {
    result.batteryLevel = nil;
  }
  result.temperature = dict[@"temperature"];
  if ((NSNull *)result.temperature == [NSNull null]) {
    result.temperature = nil;
  }
  result.humidity = dict[@"humidity"];
  if ((NSNull *)result.humidity == [NSNull null]) {
    result.humidity = nil;
  }
  result.txPower = dict[@"txPower"];
  if ((NSNull *)result.txPower == [NSNull null]) {
    result.txPower = nil;
  }
  result.inRange = dict[@"inRange"];
  if ((NSNull *)result.inRange == [NSNull null]) {
    result.inRange = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uuid ? self.uuid : [NSNull null]), @"uuid", (self.name ? self.name : [NSNull null]), @"name", (self.major ? self.major : [NSNull null]), @"major", (self.minor ? self.minor : [NSNull null]), @"minor", (self.mac ? self.mac : [NSNull null]), @"mac", (self.rssi ? self.rssi : [NSNull null]), @"rssi", (self.batteryLevel ? self.batteryLevel : [NSNull null]), @"batteryLevel", (self.temperature ? self.temperature : [NSNull null]), @"temperature", (self.humidity ? self.humidity : [NSNull null]), @"humidity", (self.txPower ? self.txPower : [NSNull null]), @"txPower", (self.inRange ? self.inRange : [NSNull null]), @"inRange", nil];
}
@end

@interface BKApiCodecReader : FlutterStandardReader
@end
@implementation BKApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [BKMinewBeaconData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface BKApiCodecWriter : FlutterStandardWriter
@end
@implementation BKApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[BKMinewBeaconData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface BKApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BKApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BKApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BKApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BKApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    BKApiCodecReaderWriter *readerWriter = [[BKApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void BKApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BKApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.getScannedBeacons"
        binaryMessenger:binaryMessenger
        codec:BKApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getScannedBeaconsWithError:)], @"BKApi api (%@) doesn't respond to @selector(getScannedBeaconsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<BKMinewBeaconData *> *output = [api getScannedBeaconsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.startScan"
        binaryMessenger:binaryMessenger
        codec:BKApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanWithError:)], @"BKApi api (%@) doesn't respond to @selector(startScanWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startScanWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.stopScan"
        binaryMessenger:binaryMessenger
        codec:BKApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanWithError:)], @"BKApi api (%@) doesn't respond to @selector(stopScanWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopScanWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.enableBluetooth"
        binaryMessenger:binaryMessenger
        codec:BKApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enableBluetoothWithError:)], @"BKApi api (%@) doesn't respond to @selector(enableBluetoothWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api enableBluetoothWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
